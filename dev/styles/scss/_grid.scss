$columns: 12;
$rows: auto;
$column-gap: 2vw;
$row-gap: 2vh;

////////////////////////////////
/////////// Span ///////////////
////////////////////////////////

// Standard mobile Größe

@mixin spans($columns, $rows, $column-gap, $row-gap) {

  // ganze Breite

  .span-#{$columns} {
    grid-column: auto / span ($columns);

    // Spezielle CEs

    &[class*='cce'] {
      display: grid;
      grid-template-columns: repeat($columns, 1fr);
      grid-template-rows: $rows;
      grid-column-gap: $column-gap;
      grid-row-gap: $row-gap;

      > * {
        grid-column: span $columns;
      }
    }

    // Einstellbare Bildgrößen

    &.ce_text {
      &.rechts, &.links {
        display: grid;
        grid-template-columns: repeat($columns, 1fr);
        grid-template-rows: $rows;
        grid-column-gap: $column-gap;
        grid-row-gap: $row-gap;
      }

      &.rechts {
        @for $i from 1 through ($columns - 3) {
          &.image-span-#{$i} {
            .text-container {
              grid-column-start: 1;
              grid-column-end: ($columns - 1);
            }

            figure {
              grid-column-start: 2;
              grid-column-end: ($columns + 1);
            }
          }
        }
      }

      &.links {
        @for $j from 1 through ($columns - 3) {
          &.image-span-#{$j} {
            figure {
              grid-column-start: 1;
              grid-column-end: $columns;
            }

            .text-container {
              grid-column-start: 3;
              grid-column-end: $columns;
            }
          }

        }
      }
    }

  }

  // kleiner als ganze Breite

  @for $i from 1 through ($columns - 1) {
    .span-#{$i} {
      grid-column: auto / span ($columns - 1);

      &[class*='cce'] {
        display: grid;
        grid-template-columns: repeat(($columns - 1), 1fr);
        grid-template-rows: $rows;
        grid-column-gap: $column-gap;
        grid-row-gap: $row-gap;

        > * {
          grid-column: span ($columns - 1);
        }
      }

      // Einstellbare Bildgrößen

      &.ce_text {
        &.rechts, &.links {
          display: grid;
          grid-template-columns: repeat(($columns - 1), 1fr);
          grid-template-rows: $rows;
          grid-column-gap: $column-gap;
          grid-row-gap: $row-gap;
        }

        &.rechts {
          @for $k from 1 through ($i - 3) {
            &.image-span-#{$k} {
              .text-container {
                grid-column-start: 1;
                grid-column-end: ($columns - 1);
              }

              figure {
                grid-column-start: 1;
                grid-column-end: $columns;
              }
            }
          }
        }

        &.links {
          @for $j from 1 through ($i - 3) {
            &.image-span-#{$j} {
              figure {
                grid-column-start: 1;
                grid-column-end: $columns;
              }

              .text-container {
                grid-column-start: 2;
                grid-column-end: $columns;
              }
            }
          }
        }
      }
    }
  }

  // Breakpoint 3

  // alle Breiten

  @media all and (min-width: $break3) {
    @for $i from 1 through $columns {
      .span-#{$i} {
        grid-column: auto / span ($i);

        &[class*='cce'] {
          display: grid;
          grid-template-columns: repeat($i, 1fr);
          grid-template-rows: $rows;
          grid-column-gap: $column-gap;
          grid-row-gap: $row-gap;

          > * {
            grid-column: span $i;
          }
        }

        // Einstellbare Bildgrößen

        &.ce_text {
          &.rechts, &.links {
            display: grid;
            grid-template-columns: repeat($i, 1fr);
            grid-template-rows: $rows;
            grid-column-gap: $column-gap;
            grid-row-gap: $row-gap;
          }

          &.rechts {
            .text-container{
              grid-column-start: 1;
              grid-column-end: (floor(($i + 1) / 2));
            }
            figure{
              grid-column-start: (floor(($i + 1) / 2) + 1);
              grid-column-end: ($i + 1);
            }

            @for $j from 1 through ($i - 3) {
              &.image-span-#{$j} {
                .text-container {
                  grid-column-start: 1;
                  grid-column-end: (($i + 1) - ($j+ 1));
                }

                figure {
                  grid-column-start: (($i + 1) - $j);
                  grid-column-end: ($i + 1);
                }
              }
            }
          }

          &.links {
            figure{
              grid-column-start: 1;
              grid-column-end: (ceil(($i + 1) / 2));
            }
            .text-container{
              grid-column-start: (ceil(($i + 1) / 2) + 1);
              grid-column-end: ($i + 1);
            }
            @for $k from 1 through ($i - 3) {
              &.image-span-#{$k} {
                figure {
                  grid-column-start: 1;
                  grid-column-end: ($k + 1);
                }

                .text-container {
                  grid-column-start: ($k + 2);
                  grid-column-end: ($i + 1);
                }
              }

            }
          }
        }

      }
    }
  }
}

/////////////////////////////////
/////////// Start ///////////////
/////////////////////////////////

// Standard mobile Größe

@mixin starts($columns) {

  // Position von 1 - Hälfte

  @for $i from 1 through ($columns / 2) {
    .starts-#{$i} {
      grid-column-start: 1;
    }
  }

  // Position von Hälfte - Ende

  @for $j from (($columns / 2) + 1) through $columns {
    .starts-#{$j} {
      grid-column-start: 2;
    }
  }

  // Breakpoint 3

  // Alle Positionen

  @media all and (min-width: $break3) {
    @for $i from 1 through $columns {
      .starts-#{$i} {
        grid-column-start: ($i);
      }
    }
  }
}

////////////////////////////////
/////////// Grid ///////////////
////////////////////////////////

@mixin grid($columns, $rows, $column-gap, $row-gap) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  grid-template-rows: $rows;
  grid-column-gap: $column-gap;
  grid-row-gap: $row-gap;
  @include spans($columns, $rows, $column-gap, $row-gap);
  @include starts($columns);
}
